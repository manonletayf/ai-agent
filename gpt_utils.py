from openai import OpenAIimport osfrom dotenv import load_dotenvimport streamlit as st# Load your .env variablesload_dotenv()OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")if not OPENAI_API_KEY:    st.warning("⚠️ La clé API OpenAI est manquante. Vérifiez votre fichier .env.")client = OpenAI(api_key=OPENAI_API_KEY)# 1️⃣ FIND COMPANIES@st.cache_data(show_spinner=False)def find_companies(location, sector, size, goal, n_results=5):    try:        system_prompt = """You are an AI assistant helping identify potential client companies in the UK for a B2B solution.You should NOT include companies that already offer or provide the target solution themselves.Only return companies that plausibly exist.Respond with a numbered Markdown list using this format:1. Company Name – One-sentence reason why they might be a good fit2. ..."""        filters = []        if location:            filters.append(f"Location: {location}")        if sector:            filters.append(f"Sector: {sector}")        if size:            filters.append(f"Company size: {size}")        if goal:            filters.append(f"Goal: {goal}")        user_prompt = (            f"You are helping identify potential client companies in the UK that could be interested in adopting a new solution.\n"            f"Do not include companies that already offer or provide this service themselves.\n\n"            f"Criteria:\n" + "\n".join(filters) +            f"\n\nList {n_results} suitable companies as potential clients."        )        response = client.chat.completions.create(            model="gpt-4-1106-preview",            messages=[                {"role": "system", "content": system_prompt},                {"role": "user", "content": user_prompt}            ],            temperature=0.7,            max_tokens=1000        )        return response.choices[0].message.content    except Exception as e:        st.error(f"❌ OpenAI — erreur lors de la recherche d'entreprises : {e}")        return ""# 2️⃣ SCORE COMPANY@st.cache_data(show_spinner=False)def score_company(name, description):    try:        system_prompt = """You are a business analyst evaluating companies for their suitability to adopt employer-sponsored childcare programs.Rate each company from 1 to 10 based on its profile, and explain your reasoning in 1–2 sentences."""        user_prompt = f"""Company name: {name}Description: {description}Rate this company’s relevance for employer-sponsored childcare."""        response = client.chat.completions.create(            model="gpt-4-1106-preview",            messages=[                {"role": "system", "content": system_prompt},                {"role": "user", "content": user_prompt}            ],            temperature=0.3,            max_tokens=200        )        return response.choices[0].message.content    except Exception as e:        st.error(f"❌ OpenAI — erreur de scoring pour {name} : {e}")        return ""# 3️⃣ ESTIMATE EMPLOYEE COUNT@st.cache_data(show_spinner=False)def estimate_employees_by_location(company_name, location, description):    try:        prompt = f"""You are an AI assistant estimating company size at a specific location.Company name: {company_name}Location: {location}Company description: {description}Based on this info, estimate how many employees this company likely has at this location. Respond with a number only, and say "Unknown" if you cannot reasonably estimate."""        response = client.chat.completions.create(            model="gpt-4-1106-preview",            messages=[{"role": "user", "content": prompt}],            temperature=0.2,            max_tokens=20        )        return response.choices[0].message.content.strip()    except Exception as e:        st.error(f"❌ OpenAI — erreur estimation effectifs : {e}")        return "Unknown"