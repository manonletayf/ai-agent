from openai import OpenAIimport osfrom dotenv import load_dotenvimport streamlit as st# Load your .env variablesload_dotenv()OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")if not OPENAI_API_KEY:    st.warning("⚠️ La clé API OpenAI est manquante. Vérifiez votre fichier .env.")client = OpenAI(api_key=OPENAI_API_KEY)# 1️⃣ FIND COMPANIES@st.cache_data(show_spinner=False)def find_companies(location, sector, size, goal, n_results=5):    try:        system_prompt = """You are an AI assistant helping identify the best potential clients for a workplace nursery scheme in the UK, specifically in London.You must only suggest companies that:- Have a large number of employees in London (e.g. 500+)- Are among the top UK employers (e.g. Glassdoor or Sunday Times rankings)- Show interest in CSR (Corporate Social Responsibility), employee wellbeing, or HR-driven initiatives- Do NOT already provide their own childcare or nursery serviceUse approximate reasoning based on the company profile. Respond with a numbered list in this exact format:1. Company Name – One-sentence reason why they fit these criteria2. ..."""        user_prompt = (            f"""        Please identify {n_results} real companies based in {location or 'the UK'} {f'in the {sector} sector' if sector else ''} {f'with approximately {size} employees' if size else ''}.                These companies should be potential candidates for:        - {goal or 'a workplace childcare solution'}                Make sure they:        - Are top employers or have a strong HR brand        - Care about CSR, employee wellbeing, or DEI        - Do **not** already offer in-house childcare                Return the list in this format:        1. Company Name – One-sentence reason they match        2. ...        """    )        response = client.chat.completions.create(            model="gpt-4-1106-preview",            messages=[                {"role": "system", "content": system_prompt},                {"role": "user", "content": user_prompt}            ],            temperature=0.7,            max_tokens=1000        )        return response.choices[0].message.content    except Exception as e:        st.error(f"❌ OpenAI — erreur lors de la recherche d'entreprises : {e}")        return ""# 2️⃣ SCORE COMPANY@st.cache_data(show_spinner=False)def score_company(name, description):    try:        system_prompt = """You are a business analyst evaluating companies for their suitability to adopt employer-sponsored childcare programs.Rate each company from 1 to 10 based on its profile, and explain your reasoning in 1–2 sentences."""        user_prompt = f"""Company name: {name}Description: {description}Rate this company’s relevance for employer-sponsored childcare."""        response = client.chat.completions.create(            model="gpt-4-1106-preview",            messages=[                {"role": "system", "content": system_prompt},                {"role": "user", "content": user_prompt}            ],            temperature=0.3,            max_tokens=200        )        return response.choices[0].message.content    except Exception as e:        st.error(f"❌ OpenAI — erreur de scoring pour {name} : {e}")        return ""# 3️⃣ ESTIMATE EMPLOYEE COUNT@st.cache_data(show_spinner=False)def estimate_employees_by_location(company_name, location, description):    try:        prompt = f"""You are an AI assistant estimating company size at a specific location.Company name: {company_name}Location: {location}Company description: {description}Based on this info, estimate how many employees this company likely has at this location. Respond with a number only, and say "Unknown" if you cannot reasonably estimate."""        response = client.chat.completions.create(            model="gpt-4-1106-preview",            messages=[{"role": "user", "content": prompt}],            temperature=0.2,            max_tokens=20        )        return response.choices[0].message.content.strip()    except Exception as e:        st.error(f"❌ OpenAI — erreur estimation effectifs : {e}")        return "Unknown"        # 4️⃣ Résumé stratégique des critères@st.cache_data(show_spinner=False)def generate_summary_for_targeting(location, sector, size, goal):    try:        prompt = f"""You are an assistant that summarizes B2B lead generation criteria in clear, strategic language. Summarize the following parameters into one paragraph suitable for a GPT prompt:Location: {location or 'Any'}Sector: {sector or 'Any'}Company size: {size or 'Any'}Goal: {goal or 'Offer a workplace nursery'}Focus on HR, CSR and employee wellbeing priorities."""        response = client.chat.completions.create(            model="gpt-4-1106-preview",            messages=[{"role": "user", "content": prompt}],            temperature=0.5,            max_tokens=150        )        return response.choices[0].message.content.strip()    except Exception as e:        st.error(f"❌ Erreur GPT lors du résumé des critères : {e}")        return ""# 5️⃣ Suggestions avancées de filtres@st.cache_data(show_spinner=False)def suggest_additional_filters(location, sector, size, goal):    try:        prompt = f"""You are a B2B marketing strategist helping design better GPT prompts for company prospecting.Given the following target:- Location: {location or 'Any'}- Sector: {sector or 'Any'}- Company Size: {size or 'Any'}- Goal: {goal or 'Workplace childcare'}What advanced filters, keywords, or attributes could help GPT identify companies that care about CSR, HR policies, and family wellbeing? List them in bullet points."""        response = client.chat.completions.create(            model="gpt-4-1106-preview",            messages=[{"role": "user", "content": prompt}],            temperature=0.7,            max_tokens=200        )        return response.choices[0].message.content.strip()    except Exception as e:        st.error(f"❌ Erreur GPT lors des suggestions de filtrage : {e}")        return ""